import React, { useState, useEffect } from 'react';
import { ArrowLeft, User, Mail, Phone, MapPin, Calendar, Clock, Save, FileText, History, ShoppingCart, Plus, Minus, Download } from 'lucide-react';
import { Button } from '../ui/Button';
import { supabase } from '../../lib/supabase';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import type { Client, OrderItem, Visit } from '../../types';
import { useProducts } from '../../hooks/useProducts';
import { useVisits } from '../../hooks/useVisits';


// Extend jsPDF type to include lastAutoTable property added by the autotable plugin
declare module 'jspdf' {
  interface jsPDF {
    lastAutoTable: { finalY: number };
  }
}

interface ActiveVisitScreenProps {
  visit: Visit;
  client: Client;
  onEndVisit: () => void;
  onBack: () => void;
}

export const ActiveVisitScreen: React.FC<ActiveVisitScreenProps> = ({
  visit,
  client,
  onEndVisit,
  onBack
}) => {
  const [activeTab, setActiveTab] = useState('notes');
  const [notes, setNotes] = useState(visit.notes || '');
  
  const [saveLoading, setSaveLoading] = useState(false);
  const [endLoading, setEndLoading] = useState(false);
  const [error, setError] = useState('');
  const [saveSuccess, setSaveSuccess] = useState(false);
  
  // Use custom hooks for data fetching
  const { products, loading: productsLoading, error: productsError, refetch: refetchProducts } = useProducts();
  const { visitHistory, loading: historyLoading, error: historyError, refetch: refetchHistory } = useVisits(client.id, visit.id);

  // Order tab state
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);
  const [pdfLoading, setPdfLoading] = useState(false);

  useEffect(() => {
    if (productsError) setError(productsError);
    if (historyError) setError(historyError);
  }, [productsError, historyError]);

  // Auto-save notes every 3 seconds when typing
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (notes !== (visit.notes || '')) {
        handleSaveNotes();
      }
    }, 3000);

    return () => clearTimeout(timeoutId);
  }, [notes, visit.notes]);
  
  // Update quantity for a product
  const updateQuantity = (product: any, quantity: number) => {
    if (quantity <= 0) {
      setOrderItems(prev => prev.filter(item => item.product_id !== product.id));
    } else {
      const total = product.price * quantity;
      const orderItem: OrderItem = { product_id: product.id, product_name: product.name, price: product.price, quantity, total };
      setOrderItems(prev => {
        const existingIndex = prev.findIndex(item => item.product_id === product.id);
        if (existingIndex >= 0) {
          const updated = [...prev];
          updated[existingIndex] = orderItem;
          return updated;
        } else {
          return [...prev, orderItem];
        }
      });
    }
  };

  const getQuantity = (productId: string): number => orderItems.find(item => item.product_id === productId)?.quantity || 0;
  const getOrderTotal = (): number => orderItems.reduce((sum, item) => sum + item.total, 0);

  const generatePDF = (orderData: any) => {
    const doc = new jsPDF();
    doc.setFontSize(20);
    doc.setTextColor(128, 0, 128);
    doc.text('VINO TRACKER', 20, 20);
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text('Order Confirmation', 20, 35);
    doc.setFontSize(12);
    doc.text(`Order ID: ${orderData.id}`, 20, 50);
    doc.text(`Date: ${new Date(orderData.created_at).toLocaleDateString()}`, 20, 60);
    doc.text(`Time: ${new Date(orderData.created_at).toLocaleTimeString()}`, 20, 70);
    doc.setFontSize(14);
    doc.text('Client Information:', 20, 90);
    doc.setFontSize(12);
    doc.text(`Name: ${client.name}`, 20, 105);
    doc.text(`Email: ${client.email}`, 20, 115);
    if (client.phone) doc.text(`Phone: ${client.phone}`, 20, 125);
    if (client.address) doc.text(`Address: ${client.address}`, 20, 135);
    doc.setFontSize(14);
    doc.text('Sales Representative:', 120, 90);
    doc.setFontSize(12);
    doc.text(`Rep ID: ${visit.rep_id}`, 120, 105);
    const tableData = orderItems.map(item => [item.product_name, item.quantity.toString(), `R${item.price.toFixed(2)}`, `R${item.total.toFixed(2)}`]);
    autoTable(doc, { head: [['Product', 'Quantity', 'Unit Price', 'Total']], body: tableData, startY: 150, theme: 'grid', headStyles: { fillColor: [128, 0, 128] }, styles: { fontSize: 10 } });
    const finalY = (doc as any).lastAutoTable?.finalY || 170;
    doc.setFontSize(14);
    doc.text(`Order Total: R${getOrderTotal().toFixed(2)}`, 20, finalY + 10);
    doc.setFontSize(10);
    doc.setTextColor(128, 128, 128);
    doc.text('Thank you for your business!', 20, finalY + 20);
    doc.text('Generated by Vino Tracker', 20, finalY + 30);
    doc.save(`Order_${orderData.id}_${client.name.replace(/\s+/g, '_')}.pdf`);
  };

  const handlePlaceOrder = async () => {
    if (orderItems.length === 0) {
      setError('Please add items to your order before placing it');
      return;
    }
    if (!confirm(`Place order for R${getOrderTotal().toFixed(2)}? This will generate a PDF receipt.`)) return;

    setPdfLoading(true);
    setError('');
    try {
      const orderData = { client_id: client.id, rep_id: visit.rep_id, visit_id: visit.id, total_amount: getOrderTotal(), items: orderItems, created_at: new Date().toISOString() };
      const { data: order, error: orderError } = await supabase.from('orders').insert(orderData).select().single();
      if (orderError) throw orderError;
      generatePDF(order);
      setOrderItems([]);
      setError('');
      setTimeout(() => alert('Order placed successfully! PDF has been downloaded.'), 100);
    } catch (err: any) {
      setError('Failed to place order');
      console.error('Error placing order:', err);
    } finally {
      setPdfLoading(false);
    }
  };

  const handleSaveNotes = async () => {
    setSaveLoading(true);
    setError('');
    setSaveSuccess(false);
    try {
      const { error } = await supabase.from('visits').update({ notes }).eq('id', visit.id);
      if (error) throw error;
      setSaveSuccess(true);
      setTimeout(() => setSaveSuccess(false), 2000);
    } catch (err: any) {
      setError('Failed to save notes');
      console.error('Error saving notes:', err);
    } finally {
      setSaveLoading(false);
    }
  };

  const handleEndVisit = async () => {
    setEndLoading(true);
    setError('');
    try {
      if (notes !== (visit.notes || '')) {
        setSaveLoading(true);
        await handleSaveNotes();
        setSaveLoading(false);
      }
      const { error } = await supabase.from('visits').update({ end_time: new Date().toISOString(), notes }).eq('id', visit.id);
      if (error) throw error;
      alert('Visit ended successfully!');
      onEndVisit();
    } catch (err: any) {
      setError('Failed to end visit');
      console.error('Error ending visit:', err);
    } finally {
      setEndLoading(false);
      setSaveLoading(false);
    }
  };

  const formatDuration = (startTime: string, endTime?: string) => {
    const start = new Date(startTime);
    const end = endTime ? new Date(endTime) : new Date();
    const diffMs = end.getTime() - start.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    if (diffMins < 60) return `${diffMins} minutes`;
    const hours = Math.floor(diffMins / 60);
    const mins = diffMins % 60;
    return `${hours}h ${mins}m`;
  };
  
  // ... (rest of the rendering logic remains the same)

  return (
    <div className="min-h-screen bg-gray-900">
      {/* ... Header ... */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* ... Client Info ... */}
        <div className="bg-gray-800 rounded-lg border border-gray-700">
          <div className="border-b border-gray-700">
            <nav className="flex space-x-8 px-6">
              {/* ... Tab Buttons ... */}
            </nav>
          </div>
          <div className="p-6">
            {activeTab === 'notes' && renderNotesTab()}
            {activeTab === 'history' && renderHistoryTab()}
            {activeTab === 'order' && renderOrderTab()}
          </div>
        </div>
      </main>
    </div>
  );
};
